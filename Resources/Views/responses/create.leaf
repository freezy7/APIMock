#extend("base"):
#export("content"):
<div class="mb-8">
    <div class="flex items-center">
        <a href="/endpoints/#(endpoint.id)" class="text-blue-600 hover:text-blue-800 mr-4">
            <i class="fas fa-arrow-left mr-2"></i>Back to #(endpoint.name)
        </a>
        <h1 class="text-3xl font-bold text-gray-900">Create Response</h1>
    </div>
</div>

<div class="max-w-4xl mx-auto">
    <div class="bg-white shadow rounded-lg">
        <div class="px-6 py-4 border-b border-gray-200">
            <h2 class="text-lg font-medium text-gray-900">Response Configuration</h2>
            <p class="text-sm text-gray-600 mt-1">
                Define how this endpoint should respond when called
            </p>
        </div>
        
        <form action="/endpoints/#(endpoint.id)/responses" method="POST" class="px-6 py-4 space-y-6">
            <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                    <label for="name" class="block text-sm font-medium text-gray-700 mb-2">
                        Response Name <span class="text-red-500">*</span>
                    </label>
                    <input type="text" name="name" id="name" required
                           class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                           placeholder="Success Response">
                </div>
                
                <div>
                    <label for="statusCode" class="block text-sm font-medium text-gray-700 mb-2">
                        Status Code <span class="text-red-500">*</span>
                    </label>
                    <select name="statusCode" id="statusCode" required
                            class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500">
                        <option value="200">200 - OK</option>
                        <option value="201">201 - Created</option>
                        <option value="204">204 - No Content</option>
                        <option value="400">400 - Bad Request</option>
                        <option value="401">401 - Unauthorized</option>
                        <option value="403">403 - Forbidden</option>
                        <option value="404">404 - Not Found</option>
                        <option value="422">422 - Unprocessable Entity</option>
                        <option value="500">500 - Internal Server Error</option>
                        <option value="502">502 - Bad Gateway</option>
                        <option value="503">503 - Service Unavailable</option>
                    </select>
                </div>
                
                <div>
                    <label for="contentType" class="block text-sm font-medium text-gray-700 mb-2">
                        Content Type <span class="text-red-500">*</span>
                    </label>
                    <select name="contentType" id="contentType" required
                            class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500">
                        <option value="application/json">application/json</option>
                        <option value="application/xml">application/xml</option>
                        <option value="text/html">text/html</option>
                        <option value="text/plain">text/plain</option>
                        <option value="text/csv">text/csv</option>
                    </select>
                </div>
                
                <div>
                    <label for="delayMs" class="block text-sm font-medium text-gray-700 mb-2">
                        Delay (milliseconds)
                    </label>
                    <input type="number" name="delayMs" id="delayMs" min="0" value="0"
                           class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                           placeholder="0">
                    <p class="mt-1 text-sm text-gray-500">
                        Simulate network latency
                    </p>
                </div>
            </div>
            
            <div>
                <div class="flex items-center space-x-4 mb-2">
                    <label class="flex items-center">
                        <input type="checkbox" name="isDefault" value="true" class="rounded border-gray-300 text-blue-600 shadow-sm focus:border-blue-300 focus:ring focus:ring-blue-200 focus:ring-opacity-50">
                        <span class="ml-2 text-sm font-medium text-gray-700">Set as default response</span>
                    </label>
                </div>
                <p class="text-sm text-gray-500">
                    The default response will be used when no specific conditions are met
                </p>
            </div>
            
            <div>
                <label for="headers" class="block text-sm font-medium text-gray-700 mb-2">
                    Custom Headers
                </label>
                <textarea name="headers" id="headers" rows="4"
                          class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 font-mono text-sm"
                          placeholder="Content-Type: application/json&#10;X-Custom-Header: value&#10;Cache-Control: no-cache"></textarea>
                <p class="mt-1 text-sm text-gray-500">
                    One header per line in "Header-Name: value" format
                </p>
            </div>
            
            <div>
                <label for="body" class="block text-sm font-medium text-gray-700 mb-2">
                    Response Body
                </label>
                <textarea name="body" id="body" rows="12"
                          class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 font-mono text-sm"
                          placeholder='{"message": "Success", "data": {"id": 1, "name": "Example"}}'></textarea>
                <div class="mt-2 flex space-x-2">
                    <button type="button" onclick="formatJSON()" class="text-sm text-blue-600 hover:text-blue-800">
                        <i class="fas fa-code mr-1"></i>Format JSON
                    </button>
                    <button type="button" onclick="validateJSON()" class="text-sm text-blue-600 hover:text-blue-800">
                        <i class="fas fa-check mr-1"></i>Validate JSON
                    </button>
                </div>
                <div id="jsonValidation" class="mt-2 text-sm"></div>
            </div>
            
            <div class="flex justify-end space-x-4 pt-6 border-t border-gray-200">
                <a href="/endpoints/#(endpoint.id)" class="bg-gray-300 hover:bg-gray-400 text-gray-700 px-4 py-2 rounded-md text-sm font-medium">
                    Cancel
                </a>
                <button type="submit" class="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-md text-sm font-medium">
                    <i class="fas fa-plus mr-2"></i>Create Response
                </button>
            </div>
        </form>
    </div>
</div>

<script>
function formatJSON() {
    const bodyTextarea = document.getElementById('body');
    try {
        const parsed = JSON.parse(bodyTextarea.value);
        bodyTextarea.value = JSON.stringify(parsed, null, 2);
        document.getElementById('jsonValidation').innerHTML = '<span class="text-green-600"><i class="fas fa-check mr-1"></i>JSON formatted successfully</span>';
    } catch (e) {
        document.getElementById('jsonValidation').innerHTML = '<span class="text-red-600"><i class="fas fa-exclamation-triangle mr-1"></i>Invalid JSON: ' + e.message + '</span>';
    }
}

function validateJSON() {
    const bodyTextarea = document.getElementById('body');
    const validationDiv = document.getElementById('jsonValidation');
    
    if (!bodyTextarea.value.trim()) {
        validationDiv.innerHTML = '<span class="text-gray-500"><i class="fas fa-info-circle mr-1"></i>No content to validate</span>';
        return;
    }
    
    try {
        JSON.parse(bodyTextarea.value);
        validationDiv.innerHTML = '<span class="text-green-600"><i class="fas fa-check mr-1"></i>Valid JSON</span>';
    } catch (e) {
        validationDiv.innerHTML = '<span class="text-red-600"><i class="fas fa-exclamation-triangle mr-1"></i>Invalid JSON: ' + e.message + '</span>';
    }
}

// Auto-validate JSON on input
document.getElementById('body').addEventListener('input', function() {
    const contentType = document.getElementById('contentType').value;
    if (contentType === 'application/json') {
        setTimeout(validateJSON, 500); // Debounce validation
    }
});

// Clear validation when content type changes
document.getElementById('contentType').addEventListener('change', function() {
    document.getElementById('jsonValidation').innerHTML = '';
});
</script>
#endexport
#endextend